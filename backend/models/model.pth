import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np

class LSTMGRUAttentionModel(nn.Module):
    def __init__(self, input_size, hidden_size=64, output_size=4, num_layers=1):
        super(LSTMGRUAttentionModel, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)
        self.gru = nn.GRU(hidden_size, hidden_size, num_layers, batch_first=True)
        self.attn = nn.Linear(hidden_size, 1)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        x = x.unsqueeze(1)
        lstm_out, _ = self.lstm(x)
        gru_out, _ = self.gru(lstm_out)
        attn_weights = torch.softmax(self.attn(gru_out).squeeze(-1), dim=1)
        attn_applied = torch.sum(gru_out * attn_weights.unsqueeze(-1), dim=1)
        return self.fc(attn_applied)

# Load and prepare data
df = pd.read_csv("sample_students.csv")  # Place your CSV file in same folder
X = df.drop(columns=["student_id", "course_id"]).values
y = np.random.randint(0, 4, size=len(X))  # Dummy labels

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)

X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.long)

# Model setup
model = LSTMGRUAttentionModel(input_size=X.shape[1])
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
for epoch in range(20):
    model.train()
    optimizer.zero_grad()
    outputs = model(X_train_tensor)
    loss = criterion(outputs, y_train_tensor)
    loss.backward()
    optimizer.step()
    print(f"Epoch {epoch+1}, Loss: {loss.item():.4f}")

# Save model
torch.save(model, "model.pth")
print("Model saved as model.pth")
